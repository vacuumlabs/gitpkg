{"version":3,"sources":["../../../src/tasks/Task/read-config.js"],"names":["getNearestConfigFile","readConfig","access","util","promisify","fs","configFileName","defaultConfig","registry","getTagName","defaultTagNameFormat","path","resolve","process","cwd","configPath","configClass","config","default","Object","assign","e"],"mappings":";;;;;;QAqBsBA,oB,GAAAA,oB;kBAeQC,U;;AApC9B;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,MAAMC,MAAM,GAAGC,eAAKC,SAAL,CAAeC,aAAGH,MAAlB,CAAf;AAEA;;;;;AAGO,MAAMI,cAAc,WAAdA,cAAc,GAAG,kBAAvB;AAEP;;;;AAGO,MAAMC,aAAa,WAAbA,aAAa,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,IADiB;AAE3BC,EAAAA,UAAU,EAAEC;AAFe,CAAtB;;AAKA,eAAeV,oBAAf,GAAsC;AAC3C;AACA,MAAI,MAAME,MAAM,CAACS,eAAKC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BR,cAA5B,CAAD,CAAhB,EAA+D;AAC7D,WAAOA,cAAP;AACD,GAJ0C,CAM3C;;;AACA,SAAO,sBAAOA,cAAP,CAAP;AACD;AAED;;;;;;;AAKe,eAAeL,UAAf,CAA0Bc,UAA1B,EAAsC;AACnD,MAAI;AACF,UAAMC,WAAW,GAAG,sEAAaD,UAAb,KAApB;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,QAAI,OAAOD,WAAW,CAACE,OAAnB,KAA+B,UAAnC,EAA+C;AAC7CD,MAAAA,MAAM,GAAGD,WAAW,CAACE,OAAZ,EAAT;AACD,KAFD,MAEO,IAAI,OAAOF,WAAP,KAAuB,UAA3B,EAAuC;AAC5CC,MAAAA,MAAM,GAAGD,WAAW,EAApB;AACD;;AAED,WAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,aAAlB,EAAiCU,MAAjC,CAAP;AACD,GAXD,CAWE,OAAOI,CAAP,EAAU;AACV,WAAOd,aAAP;AACD;AACF","sourcesContent":["import findUp from 'find-up';\nimport fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport { defaultTagNameFormat } from '../Publish/get-git-tag-name';\n\nconst access = util.promisify(fs.access);\n\n/**\n * The name of the config file.\n */\nexport const configFileName = 'gitpkg.config.js';\n\n/**\n * Here goes any default values.\n */\nexport const defaultConfig = {\n  registry: null,\n  getTagName: defaultTagNameFormat\n};\n\nexport async function getNearestConfigFile() {\n  // First check if config file is in same dir\n  if (await access(path.resolve(process.cwd(), configFileName))) {\n    return configFileName;\n  }\n\n  // Then check in parent directories\n  return findUp(configFileName);\n}\n\n/**\n * Returns an object with configurable settings.\n *\n * @param {string} directory Path to config file.\n */\nexport default async function readConfig(configPath) {\n  try {\n    const configClass = await import(configPath);\n    let config = {};\n\n    if (typeof configClass.default === 'function') {\n      config = configClass.default();\n    } else if (typeof configClass === 'function') {\n      config = configClass();\n    }\n\n    return Object.assign({}, defaultConfig, config);\n  } catch (e) {\n    return defaultConfig;\n  }\n}\n"],"file":"read-config.js"}